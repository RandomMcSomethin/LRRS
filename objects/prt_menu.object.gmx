<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuPos = room_width;
menuState = 0;
opened = false;
for (i = 0; i &lt; 8; i++) {
    menuItem[i] = -1;
}
for (i = 0; i &lt; 8; i++) {
    menuItemAction[i] = -1;
}
//menuItem[0] = "test";
//menuItem[2] = "egg";
selected = 0;
prevMenu = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (menuState == 0 &amp;&amp; menuPos &lt; room_width) {
    menuPos += room_width/10;
}
if (menuState == 1 &amp;&amp; menuPos &gt; room_width/2) {
    menuPos -= room_width/10;
}
if (menuState == 1 &amp;&amp; menuPos == room_width/2) {
    opened = true;
} else opened = false;
if (opened &amp;&amp; !INPUT_LOCKED) {
    if (keyboard_check_pressed(KEY_DOWN)) {
        for (i = selected; i + 1 &lt; 8 &amp;&amp; menuItem[i + 1] == -1; i++) {
            selected++;
        }
        playSFX(snd_menusel);
        selected++;
    }
    if (keyboard_check_pressed(KEY_UP)) {
        for (i = selected; i - 1 &gt; 0 &amp;&amp; menuItem[i - 1] == -1; i--) {
            selected--;
        }
        playSFX(snd_menusel);
        selected--;
    }
    if (selected &gt; 7) {
        selected = 0;
    }
    if (selected &lt; 0) {
        selected = 7;
    }
    for (i = selected; menuItem[i] == -1; i--) { selected--; }
    if (keyboard_check_pressed(KEY_SHOOT)) {
        event_user(EV_MENUSELECT);
    }
    if (keyboard_check_pressed(KEY_FOCUS)) {
        event_user(EV_MENUBACK);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (menuItem[selected] != -1) {
    if (selected == 0) {
        //debug();
    }
    if (selected == 2) {
        //debug("Debug message 2.");
    }
    playSFX(snd_menuconfirm);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(EV_CLOSEMENU);
if (prevMenu != -1) {
    menu_open(prevMenu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuState = 0;
playSFX(snd_menuback);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(prt_menu) { menuState = 0; }
menuState = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(view_wview[0], view_hview[0]);
draw_set_alpha(1);
draw_set_color(c_white);
draw_rectangle(menuPos, 0, view_wview[0], view_hview[0], true);
draw_set_alpha(0.75);
draw_set_color(c_black);
draw_rectangle(menuPos, 0, view_wview[0], view_hview[0], false);
draw_set_alpha(1);
draw_set_color(c_white);
if (opened) {
    for (i = 0; i &lt; 8; i++) {
        if (menuItem[i] != -1) {
            draw_set_font(font_gamefont);
            draw_text(view_wview[0]/1.8, view_hview[0]/10 + view_hview[0]/10*i, menuItem[i]);
        }
        if (menuItem[i] == -1) {
            draw_set_color(c_gray);
            draw_set_font(font_gamefont);
            draw_text(view_wview[0]/1.8, view_hview[0]/10 + view_hview[0]/10*i, "---");
            draw_set_color(c_white);
        }
    }
    var arrowSprite = spr_selector;
draw_sprite_ext(arrowSprite, 0, view_wview[0]/2 + sprite_get_width(arrowSprite)*1.4, view_hview[0]/10 + view_hview[0]/10*selected + sprite_get_height(arrowSprite)*0.4, 1, 1, 270, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
