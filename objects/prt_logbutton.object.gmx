<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_logbg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>name = "None";
desc = "This has no description. How enigmatic!";
sprite = spr_purpleship1;
statTable = array_create(5);
tidbits = "This is where you put the 'tidbits' of enemy logs.  
Tidbits are the lore-based descriptions of enemies and such things that serve as an 
enhancement to the game.";
level = -1;

selected = 0;
activated = false;
rightLog = noone;
leftLog = noone;
topLog = noone;
bottomLog = noone;
searchedLogs = false;
parent = instance_find(obj_logparent, 0);
logs = instance_find(obj_enemylogs, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (level != -1 &amp;&amp; getSaveItem(LEVELS, level) + 1 == 0) instance_destroy();

if (!searchedLogs) {
    for (k = 0; k &lt; room_height &amp;&amp; topLog == noone; k++) {
        topLog = collision_line(x, y, x, y - k, prt_logbutton, true, true);
    }
    for (l = 0; l &lt; room_height &amp;&amp; bottomLog == noone; l++) {
        bottomLog = collision_line(x, y, x, y + l, prt_logbutton, true, true);
    }
    for (i = 0; i &lt; room_width &amp;&amp; rightLog == noone; i++) {
        rightLog = collision_line(x, y, x + i, y, prt_logbutton, true, true);
    }
    for (j = 0; j &lt; room_width &amp;&amp; leftLog == noone; j++) {
        leftLog = collision_line(x, y, x - j, y, prt_logbutton, true, true);
    }
    searchedLogs = true;
}

if (selected) {
    if (keyboard_check_pressed(KEY_LEFT) &amp;&amp; selected) {
        for (j = 0; j &lt; room_width &amp;&amp; leftLog == noone; j++) {
            leftLog = collision_point(x - j, y, prt_logbutton, false, true);
        }
        show_debug_message(string(j));
        if (leftLog != noone) {
            leftLog.activated = true;
            selected = false;
        }
    }
    if (keyboard_check_pressed(KEY_RIGHT) &amp;&amp; selected) {
        for (i = 0; i &lt; room_width &amp;&amp; rightLog == noone; i++) {
            rightLog = collision_point(x + i, y, prt_logbutton, false, true);
        }
        if (rightLog != noone) {
            rightLog.activated = true;
            selected = false;
        }
    }
    if (keyboard_check_pressed(KEY_UP) &amp;&amp; topLog != noone &amp;&amp; instance_exists(topLog)) {
        topLog.activated = true;
        selected = false;
    }
    if (keyboard_check_pressed(KEY_DOWN) &amp;&amp; bottomLog != noone &amp;&amp; instance_exists(bottomLog)) {
        bottomLog.activated = true;
        selected = false;
    }
}

if (activated) { 
    logs.name = name;
    logs.desc = desc;
    logs.sprite = sprite;
    logs.statTable = statTable;
    logs.tidbits = tidbits;
    selected = true; activated = false; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_sprite_ext(sprite, -1, x, y, 20/sprite_get_width(sprite), 20/sprite_get_height(sprite), image_angle, image_blend, image_alpha);
if (selected) draw_circle_colour(x, y, 10, c_yellow, c_yellow, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
