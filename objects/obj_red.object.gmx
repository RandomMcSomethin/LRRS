<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_selector</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.inventory[0] = -1;
global.inventory[1] = -1;
global.inventory[2] = -1;
global.inventory[3] = -1;
global.inventory[4] = -1;
global.inventory[5] = -1;
global.inventory[6] = -1;
global.inventory[7] = -1;
grounded = true;
wallsliding = false;
slid = false;
currentemptyslot = 0;
currentslot = 0;
collecting = false;
collecteditem = 0;
collecteditemname = "Testing";
collecteditemdescription = "1, 2, 3";
textcache = "This message shouldn't appear.  ";
didyoudothething = false;
fading = false;
fadetime = 255;
items = 0;
maxitems = 8;
full = false;
x1 = view_xview[0];
x2 = x1 + view_wview[0];
y1 = view_yview[0];
y2 = y1 + 64;
bustedyallready = false;
j = maxitems;
useitem = -1;
hollered = false;
jumptimer = 0;
maxjumptimer = 2;
runtimer = 0;
maxruntimer = 70;
boosted = false;
shinesparkstored = false;
shinesparking = false;
ssdir = 0;
sstimer = 0;
maxsstimer = 600;
sspart = part_type_create();
part_type_sprite(sspart, sprite_index, image_index, 0, 0);
part_type_scale(sspart, image_xscale, 1);
part_type_alpha2(sspart, 0.5, 0);
part_type_life(sspart, 30, 30);
timer = 0;
sliding = false;
slidetimer = -1;
maxslidetimer = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_sprite(sspart, sprite_index, image_index, 0, 0);
r = keyboard_check(vk_right);
l = -keyboard_check(vk_left);
j = keyboard_check_pressed(ord("X"));
j2 = keyboard_check(ord("X"));
s = keyboard_check(vk_lshift);
ss = keyboard_check(vk_down);
u = keyboard_check(vk_up);
shoot = keyboard_check(ord("Z"));
inspect = keyboard_check(ord("C"));
one = keyboard_check(ord("1"));
two = keyboard_check(ord("2"));
three = keyboard_check(ord("3"));
four = keyboard_check(ord("4"));
five = keyboard_check(ord("5"));
six = keyboard_check(ord("6"));
seven = keyboard_check(ord("7"));
eight = keyboard_check(ord("8"));
normalmaxgrav = 9.8;
maxgrav = normalmaxgrav;
if (!j2) { jumptimer = maxjumptimer;}
if (!boosted &amp;&amp; !sliding) {
    if (grounded) { maxhspeed = 4.0; jumptimer = 0;}
    else { maxhspeed = 2.0; }
}
g = maxgrav/20;
part_type_scale(sspart, image_xscale, 1);
image_speed = 1.0;
if (s == 1) { maxhspeed = 5.0; }
background_x[0] = lerp(-50, room_width - background_width[0] + 50, view_xview[0]/(room_width-view_wview[0]))/2;
background_y[0] = lerp(-50, room_height - background_height[0] + 50, view_yview[0]/(room_height-view_hview[0]))/2;
timer++; 

//Boosting/Shinesparking
if (maxruntimer == runtimer) { boosted = true; } else { boosted = false; }
if (ss &amp;&amp; boosted) shinesparkstored = true;
if (boosted) { maxhspeed = 8.0; }

if (!shinesparking &amp;&amp; !sliding) {
    if (r &amp;&amp; hspeed &lt; maxhspeed) { hspeed += maxhspeed/4; }
    if ((l == -1) &amp;&amp; hspeed &gt; -maxhspeed) { hspeed -= maxhspeed/4; }
    if (!r &amp;&amp; l != -1) { hspeed = hspeed/maxhspeed;}
    if (shoot &amp;&amp; shinesparkstored) { shinesparking = true; }
}

//Animation/Boosting
if (!shinesparking) {
if (r == 1 &amp;&amp; l != -1) {
    if(sprite_index != spr_selector &amp;&amp; !boosted &amp;&amp; !sliding &amp;&amp; grounded) { sprite_index = spr_selector;}
    image_xscale = 1;
    if (s == 1) { image_speed = 1.25; }
    if (runtimer &lt; maxruntimer &amp;&amp; grounded &amp;&amp; !(place_meeting(x+hspeed,y - 1,obj_wall))) runtimer++;
}
else if (l == -1 &amp;&amp; r != 1) {
    if(sprite_index != spr_selector &amp;&amp; !boosted &amp;&amp; !sliding &amp;&amp; grounded) { sprite_index = spr_selector;}
    image_xscale = -1;
    if (s == 1) { image_speed = 1.25; }
    if (runtimer &lt; maxruntimer &amp;&amp; grounded &amp;&amp; !(place_meeting(x+hspeed,y - 1,obj_wall))) runtimer++;
}
else {
    if (!boosted &amp;&amp; grounded) sprite_index = spr_selector; image_index = 0;
    if (!shinesparkstored) runtimer = 0;
}
if (grounded &amp;&amp; slidetimer == -1 &amp;&amp; ss &amp;&amp; j) {
    sliding = true;
}
if (sliding) {
    slidetimer++;
    sprite_index = spr_selector; image_index = 2;
    hspeed = maxhspeed*2*image_xscale;
}
if (!sliding) {
    slidetimer = -1;
}
if (slidetimer == maxslidetimer) {
    sliding = false;
    if (grounded) hspeed = maxhspeed*image_xscale;
    slidetimer = -1;
}
} else {
    sstimer++;
    if (sstimer &lt; 30) { vspeed = -0.5; 
    sprite_index = spr_selector; image_index = 2;
    ssdir = 0;
    if (u) { ssdir = 0; } 
    if (r) { ssdir = 2; }
    if (ss) { ssdir = 4; }
    if (l == -1) { ssdir = 6; }
    if (u &amp;&amp; r) { ssdir = 1; }
    if (r &amp;&amp; ss) { ssdir = 3; }
    if (ss &amp;&amp; l) { ssdir = 5; }
    if (l == -1 &amp;&amp; u) { ssdir = 7; }
    }
    if (sstimer == 30) { vspeed = 0; }
    if (sstimer &gt; 30) { 
    if (ssdir == 0) { vspeed = -16; }
    if (ssdir == 1) { vspeed = -16;  hspeed = 16; }
    if (ssdir == 2) { hspeed = 16; }
    if (ssdir == 3) { vspeed = 16;   hspeed = 16; }
    if (ssdir == 4) { vspeed = 16; }
    if (ssdir == 5) { vspeed = 16;  hspeed = -16; }
    if (ssdir == 6) { hspeed = -16; }
    if (ssdir == 7)  { vspeed = -16;  hspeed = -16; }
    }
    if (sstimer == maxsstimer) { shinesparking = false; sstimer = 0; }
}
// if (boosted ^^ shinesparkstored) { sprite_index = spr_santahat_shinespark; image_speed = 1; }
if (place_meeting(x+hspeed,y - 1,obj_wall)) {
    while(!place_meeting(x+sign(hspeed),y - 1,obj_wall)) {
        x += sign(hspeed);
        sliding = false;
        shinesparking = false;
        sstimer = 0; 
        if (!grounded) shinesparkstored = false;
    }
    if (!grounded &amp;&amp; !slid &amp;&amp; !place_meeting(x,y + neg(vspeed),obj_wall)) { vspeed -= abs(l+r+hspeed)/2; slid = true; sliding = false; }
    if (place_meeting(x+hspeed,y+vspeed,obj_wall)) { hspeed = 0; sliding = false;}
    if (sstimer &gt; 30) { shinesparking = false; shinesparkstored = false; boosted = false; sstimer = 0;}
}
if (place_meeting(x+l+r,y,obj_wall)) { wallsliding = true; slid = true;}
else { wallsliding = false; slid = false;}

if (place_meeting(x,y - sprite_height/2 + neg(vspeed),obj_wall)) { wallsliding = false; slid = false;}

if (place_meeting(x,y+vspeed,obj_wall)) {
    while(!place_meeting(x,y+sign(vspeed),obj_wall)) {
        y += sign(vspeed);
    }
    if (sstimer &gt; 30) { shinesparking = false; sstimer = 0; shinesparkstored = false; boosted = false; }
    grounded = true;
    vspeed = 0;
} else {
    if (!shinesparking) {
    if (wallsliding &amp;&amp; !place_meeting(x,y - sprite_height/2 - 1,obj_wall)) { maxgrav = normalmaxgrav/4; } else { maxgrav = normalmaxgrav; }
        if(vspeed &lt; maxgrav) {
            vspeed += g;    
        }
    }
    grounded = false;
}
if(!shinesparking &amp;&amp; j == 1 &amp;&amp; (slidetimer &gt;= 5 || slidetimer == -1) &amp;&amp; (grounded == true || slid == true) &amp;&amp; !place_meeting(x,y - sprite_height/2 - 1,obj_wall)) {
        if (!shinesparkstored) runtimer = 0;
        vspeed = -10;
        audio_play_sound(snd_pew, 1, 0);
    if (slid &amp;&amp; !grounded &amp;&amp; !boosted) { hspeed -= (l+r)*maxhspeed*2; }
    if (slidetimer &gt;= 5) { hspeed = 8*image_xscale;
    sprite_index = spr_selector; image_index = 2; }
}
if (j2 == 1 &amp;&amp; jumptimer &lt; maxjumptimer &amp;&amp; !place_meeting(x,y - sprite_height/2 - 1,obj_wall)) {
    jumptimer++;
}

if (!grounded) { sprite_index = spr_selector; image_index = 2; } 
    //if (place_meeting(x,y+neg(vspeed) - 1,obj_wall)) { grounded = false; wallsliding = false; slid = false;}

if(collecting == true) {
    if (items &lt; maxitems) {
        global.inventory[currentemptyslot] = collecteditem;
        didyoudothething = true;
        collecting = false; 
        items += 1;
    }
    else {
        full = true;
        collecting = false;
    }
}
for(i = 0; i &lt; maxitems; i += 1) {
    j -= 1
    if (global.inventory[i] == -1) {
        currentemptyslot = i;
    }
}
j = maxitems;

if (one == 1) {
    currentslot = 0;
}
if (two == 1) {
    currentslot = 1;
}
if (three == 1) {
    currentslot = 2;
}
if (four == 1) {
    currentslot = 3;
}
if (five == 1) {
    currentslot = 4;
}
if (six == 1) {
    currentslot = 5;
}
if (seven == 1) {
    currentslot = 6;
}
if (eight == 1) {
    currentslot = 7;
}

if (shoot == 1) {
    if (global.inventory[currentslot] != -1) {
        useitem = collecteditem;
        global.inventory[currentslot] = -1;
        items -= 1;
    }
}

if (y &gt; room_height &amp;&amp; !hollered) { audio_play_sound(snd_goofyholler, 11, 0); hollered = true; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (textcache != "This message shouldn't appear.  ") {
    draw_set_font(font_gamefont);
    draw_text(20, 120, textcache);
}
if (didyoudothething == true) {
    fadetime = 255;
    draw_set_font(font_gamefont);
    textcache = "You got the " + collecteditemname + "!  ";  
    fading = true
    didyoudothething = false;
}
if (full == true) {
    fadetime = 255;
    draw_set_font(font_gamefont);
    draw_text_color(600, y/2, "I can't pick up anything else.  ", c_black, c_black, c_black, c_black, fadetime);  
    fading = true;
}
if (fading == true) {
    fadetime -= 255/180;
}
for(i = 0; i &lt; maxitems; i += 1) {
    draw_sprite(spr_logbg, 0, 24+(i*64), 32);
    if (global.inventory[i] != -1) {
        draw_sprite(spr_selector, global.inventory[i], x1+48+(i*64), 64);
    }
    if (i == currentslot) {
        draw_sprite(spr_logbg, 0, 24+(i*64), 32);
    }
}
if (fadetime &lt;= 0) { 
    full = false;
    fading = false;
    fadetime = 255;
    textcache = "This message shouldn't appear.  ";
}

//-----------------------------------------------------------------------------------
//The long, long list of item interactions and stuff
//===================================================================================
if (useitem == 0) {
    fadetime = 255;
    textcache = "You deployed the Generic Object.  ";  
    object = instance_create(x, y, obj_peashooterbullet);
    object.image_xscale = image_xscale;
    useitem = -1;
    fading = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_self();
/*
draw_set_color(c_black);
draw_text(x, y - sprite_height*2, sliding);
draw_text(x, y - sprite_height*3, slidetimer); 
//draw_text(x, y - sprite_height*4, shinesparking);
//draw_text(x, y - sprite_height*3, ssdir);
//draw_text(x, y - sprite_height*2, sstimer);
for(i = 1; i &lt; sprite_height/2 - 1; i += 1) {
    draw_point(x+hspeed,y - i - 1);
}
*/
if (boosted || shinesparking) {
    if (timer % (maxsstimer/100) == 0) {
        part_particles_create(SNAME, x, y, sspart, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
