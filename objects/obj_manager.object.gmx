<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.save_map = ds_map_create();
global.log_grid = ds_grid_create(4, 10);
global.music_emitter = audio_emitter_create();
global.sfx_emitter = audio_emitter_create();
global.sname = part_system_create();
global.inputLocked = false;
global.killer = "Nobody"; 
global.manager = id;
global.paused = false;
global.left = vk_left;
global.right = vk_right;
global.up = vk_up;
global.down = vk_down;
global.shoot = ord("Z");
global.focus = ord("X");
global.prev = ord("C");
global.next = ord("V");
global.charge = vk_shift;
global.pause = vk_escape;
keySet[0, 0] = "Left"; keySet[0, 1] = KEY_LEFT;
keySet[1, 0] = "Right"; keySet[1, 1] = KEY_RIGHT;
keySet[2, 0] = "Up"; keySet[2, 1] = KEY_UP;
keySet[3, 0] = "Down"; keySet[3, 1] = KEY_DOWN;
keySet[4, 0] = "Shoot"; keySet[4, 1] = KEY_SHOOT;
keySet[5, 0] = "Focus"; keySet[5, 1] = KEY_FOCUS;
keySet[6, 0] = "Previous Weapon"; keySet[6, 1] = KEY_PREV;
keySet[7, 0] = "Next Weapon"; keySet[7, 1] = KEY_NEXT;
keySet[8, 0] = "Use Special"; keySet[8, 1] = KEY_CHARGE;
keySet[9, 0] = "Pause"; keySet[9, 1] = KEY_PAUSE;
getLogs();
save = ini_open("save.ini");
bgspeed = 0.1;
background_vspeed[0] = bgspeed;
// INI Save --------------------------------------------------------------
screenSize = getIniReal("save.ini", "Options", "Screen Size", 1);
ds_map_add(global.save_map, "Screen Size", screenSize);
musVolume = getIniReal("save.ini", "Options", "Music Volume", 1);
ds_map_add(global.save_map, "Music Volume", musVolume);
sfxVolume = getIniReal("save.ini", "Options", "SFX Volume", 1);
ds_map_add(global.save_map, "SFX Volume", sfxVolume);
difficulty = getIniReal("save.ini", "Save", "Difficulty", 2);
ds_map_add(global.save_map, "Difficulty", difficulty);
lvlNum = 1;
level = rm_introcutscene;
lvlNum = getIniReal("save.ini", "Save", "Level", 1);
if (lvlNum == 1) level = rm_introcutscene;
if (lvlNum == 2) level = rm_level1;
if (lvlNum == 3) level = rm_level2;
if (lvlNum == 4) level = rm_level3;
if (lvlNum == 5) level = rm_level4;
cardNum = getIniReal("save.ini", "Save", "Card Number", 0);
ds_map_add(global.save_map, "Card Number", cardNum);
ds_map_add(global.save_map, "Level", level);
ship = getIniReal("save.ini", "Save", "Ship", 1);
ds_map_add(global.save_map, "Ship", ship);
color = getIniReal("save.ini", "Save", "Color", 0);
ds_map_add(global.save_map, "Color", color);
weapon1 = getIniReal("save.ini", "Save", "Weapon 1", 1);
ds_map_add(global.save_map, "Weapon 1", weapon1);
metal = getIniReal("save.ini", "Save", "Metal", 0);
ds_map_add(global.save_map, "Metal", metal);
shooterKills = getIniReal("save.ini", "Save", "Shooter Kills", 0);
ds_map_add(global.save_map, "Shooter Kills", shooterKills);
shooter = getIniReal("save.ini", "Save", "Shooter", 0);
ds_map_add(global.save_map, "Shooter Unlocked", shooter);
KEY_LEFT = getIniReal("save.ini", "Controls", "Left Key", keySet[0, 1]);
KEY_RIGHT = getIniReal("save.ini", "Controls", "Right Key", keySet[1, 1]);
KEY_UP = getIniReal("save.ini", "Controls", "Up Key", keySet[2, 1]);
KEY_DOWN = getIniReal("save.ini", "Controls", "Down Key", keySet[3, 1]);
KEY_SHOOT = getIniReal("save.ini", "Controls", "Shoot Key", keySet[4, 1]);
KEY_FOCUS = getIniReal("save.ini", "Controls", "Focus Key", keySet[5, 1]);
KEY_PREV = getIniReal("save.ini", "Controls", "Prev. Key", keySet[6, 1]);
KEY_NEXT = getIniReal("save.ini", "Controls", "Next Key", keySet[7, 1]);
KEY_CHARGE = getIniReal("save.ini", "Controls", "Special Key", keySet[8, 1]);
KEY_PAUSE = getIniReal("save.ini", "Controls", "Pause Key", keySet[9, 1]);
ini_close();
keySet[0, 0] = "Left"; keySet[0, 1] = KEY_LEFT;
keySet[1, 0] = "Right"; keySet[1, 1] = KEY_RIGHT;
keySet[2, 0] = "Up"; keySet[2, 1] = KEY_UP;
keySet[3, 0] = "Down"; keySet[3, 1] = KEY_DOWN;
keySet[4, 0] = "Shoot"; keySet[4, 1] = KEY_SHOOT;
keySet[5, 0] = "Focus"; keySet[5, 1] = KEY_FOCUS;
keySet[6, 0] = "Previous Weapon"; keySet[6, 1] = KEY_PREV;
keySet[7, 0] = "Next Weapon"; keySet[7, 1] = KEY_NEXT;
keySet[8, 0] = "Use Special"; keySet[8, 1] = KEY_CHARGE;
keySet[9, 0] = "Pause"; keySet[9, 1] = KEY_PAUSE;
// TXT Save -----------------------------------------------------------------
global.shop = array_create(10);
global.ships = array_create(10);
global.weapons = array_create(10);
global.items = array_create(10);
global.sprays = array_create(10);
global.levels = array_create(10);
if (!file_exists("save.txt")) { resetSave(); game_restart(); }
file = file_text_open_read("save.txt")
for (i = 0; i &lt; array_length_1d(SHIPS); i += 1) {
    SHIPS[i] = file_text_read_real(file);
}
file_text_readln(file);
for (i = 0; i &lt; array_length_1d(WEAPONS); i += 1) {
    WEAPONS[i] = file_text_read_real(file);
}
file_text_readln(file);
for (i = 0; i &lt; array_length_1d(ITEMS); i += 1) {
    ITEMS[i] = file_text_read_real(file);
}
file_text_readln(file);
for (i = 0; i &lt; array_length_1d(SPRAYS); i += 1) {
    SPRAYS[i] = file_text_read_real(file);
}
file_text_readln(file);
for (i = 0; i &lt; array_length_1d(LEVELS); i += 1) {
    LEVELS[i] = file_text_read_real(file);
}
file_text_close(file);
//buy(SPRAYS, 3, 0);
// Variables -------------------------------------
gameOver = false;
gOTimer = -1;
deathSpr = spr_gitgud;
gODrawTimer = -1;
gameOverText = "Ya dun goofed."
isLevel = false;
logName = "Pick the log you would like to read."
logSprite = -1;
logDisc = "";
logHeight = "";
logWeight = "";
controlsSet = true;
cTimer = 45;
c = 0;
audio_emitter_gain(MUS, SAVE_MAP[? "Music Volume"]);
audio_emitter_gain(SFX, SAVE_MAP[? "SFX Volume"]);
sSTimer = 0;
intensity = 0;
sgn = 1;
bossTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screenSize = SAVE_MAP[? "Screen Size"];
if (background_vspeed[0] != bgspeed) background_vspeed[0] = bgspeed;
if (screenSize &lt; 2) {
    view_wport[0] = room_width*screenSize;
    view_hport[0] = room_height*screenSize;
} else if (screenSize == 2) {
    window_set_fullscreen(true);
} else {
    window_set_fullscreen(false);
    SAVE_MAP[? "Screen Size"] = 1;
    view_wport[0] = room_width*screenSize;
    view_hport[0] = room_height*screenSize;
}
//Game Over handler
if (gOTimer == 0) {
    audio_stop_all();
    playSFX(snd_playerexplosion);
}
if (gOTimer == 60) {
    playMusic(mus_gameoverloop);
    menu_open(obj_gameovermenu);
    gODrawTimer++;
}
//Boss defeat handler
if (bossTimer &gt;= 1) { 
    bossTimer++;
}
//Pause handler
if (keyboard_check_pressed(KEY_PAUSE) &amp;&amp; isLevel) {
    if (PAUSED) PAUSED = false; else { PAUSED = true; menu_open(obj_pausemenu)}
}
//Screenshake handler
if (sSTimer &gt; 0) {
    sSTimer--;
    if (sSTimer mod 2 == 0) {
        view_xview[0] = random_range(-1, 1)*intensity;
        //sgn = -sgn;
        view_yview[0] = random_range(-1, 1)*intensity;
    }
} else {
    view_xview[0] = 0;
    view_yview[0] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (PAUSED) exit;
gOTimer++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(SAVE_MAP);
ds_grid_destroy(LOG_GRID);
audio_emitter_free(MUS);
audio_emitter_free(SFX);
part_system_destroy(SNAME);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(prt_player) &amp;&amp; isLevel == true) {
    event_user(EV_GAMEOVER);
}
if (gODrawTimer &gt; -1) {
    if (gODrawTimer &lt; 60) {
        gODrawTimer++;
    }
    draw_set_alpha((1/60)*gODrawTimer)
    draw_set_color(c_black);
    draw_rectangle(0, 0, room_width, room_height, false);
    draw_set_color(c_red);
    draw_set_font(font_gamefont);
    draw_text(20, 20, "You Died");
    draw_set_font(font_menufont);
    draw_text(20, 40, gameOverText);
    draw_text(20, room_height/3, "Killed by: " + KILLER);
    draw_sprite_ext(deathSpr, -1, 84, room_height * 3/4, 2, 2, 0, c_white, (1/60)*gODrawTimer);
}
if (room == rm_enemylogs) {
    //drawLogs();
    //if (keyboard_check_pressed(KEY_SHOOT) &amp;&amp; obj_enemylogsmenu.menuState == 0) { obj_enemylogsmenu.menuState = 1; }
}
if (room == rm_equiproom) {
    drawEquipRoom();
}
if (!controlsSet) {
    if (cTimer &gt; 0) cTimer--;
    INPUT_LOCKED = true;
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_font(font_gamefont);
    draw_text_ext(20, 20, "Press the key for: " + keySet[c, 0], 3 + font_get_size(font_gamefont), 150);
    if (keyboard_check_pressed(keyboard_key) &amp;&amp; keyboard_key != 0 &amp;&amp; cTimer == 0) {
        keySet[c, 1] = keyboard_key;
        c++;
    }
    if (c == 10) {
        controlsSet = true;
        INPUT_LOCKED = false;
        c = 0;
        cTimer = 45;
        KEY_LEFT = keySet[0, 1];
        KEY_RIGHT = keySet[1, 1];
        KEY_UP = keySet[2, 1];
        KEY_DOWN = keySet[3, 1];
        KEY_SHOOT = keySet[4, 1];
        KEY_FOCUS = keySet[5, 1];
        KEY_PREV = keySet[6, 1];
        KEY_NEXT = keySet[7, 1];
        KEY_CHARGE = keySet[8, 1];
        KEY_PAUSE = keySet[9, 1];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
